{"version":3,"file":"get-video-id.min.js","sources":["../src/youtube.js","../src/vimeo.js","../src/vine.js","../src/videopress.js","../src/microsoftstream.js","../src/tiktok.js","../src/dailymotion.js","../src/index.js","../src/utils/get-src.js"],"sourcesContent":["/**\n * Strip away any remaining parameters following `?` or `/` or '&' for YouTube shortcode strings.\n *\n * @note this function is not meant to work with url strings containing a protocol like https://\n * @param {String} shortcodeString - the parameter string\n * @returns {String}\n */\nfunction stripParameters(shortcodeString) {\n\t// Split parameters or split folder separator\n\tif (shortcodeString.includes('?')) {\n\t\treturn shortcodeString.split('?')[0];\n\t}\n\n\tif (shortcodeString.includes('/')) {\n\t\treturn shortcodeString.split('/')[0];\n\t}\n\n\tif (shortcodeString.includes('&')) {\n\t\treturn shortcodeString.split('&')[0];\n\t}\n\n\treturn shortcodeString;\n}\n\n/**\n * Get the Youtube Video id.\n * @param {string} youtubeStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function youtube(youtubeString) {\n\tlet string_ = youtubeString;\n\n\t// Remove time hash at the end of the string\n\tstring_ = string_.replace(/#t=.*$/, '');\n\n\t// Shortcode\n\tconst shortcode = /youtube:\\/\\/|https?:\\/\\/youtu\\.be\\/|http:\\/\\/y2u\\.be\\//g;\n\n\tif (shortcode.test(string_)) {\n\t\tconst shortcodeid = string_.split(shortcode)[1];\n\t\treturn stripParameters(shortcodeid);\n\t}\n\n\t// /v/ or /vi/\n\tconst inlinev = /\\/v\\/|\\/vi\\//g;\n\n\tif (inlinev.test(string_)) {\n\t\tconst inlineid = string_.split(inlinev)[1];\n\t\treturn stripParameters(inlineid);\n\t}\n\n\t// V= or vi=\n\tconst parameterv = /v=|vi=/g;\n\n\tif (parameterv.test(string_)) {\n\t\tconst array = string_.split(parameterv);\n\t\treturn stripParameters(array[1].split('&')[0]);\n\t}\n\n\t// V= or vi=\n\tconst parameterwebp = /\\/an_webp\\//g;\n\n\tif (parameterwebp.test(string_)) {\n\t\tconst webp = string_.split(parameterwebp)[1];\n\t\treturn stripParameters(webp);\n\t}\n\n\t// Embed\n\tconst embedreg = /\\/embed\\//g;\n\n\tif (embedreg.test(string_)) {\n\t\tconst embedid = string_.split(embedreg)[1];\n\t\treturn stripParameters(embedid);\n\t}\n\n\t// ignore /user/username pattern\n\tconst usernamereg = /\\/user\\/([a-zA-Z\\d]*)$/g;\n\n\tif (usernamereg.test(string_)) {\n\t\treturn undefined;\n\t}\n\n\t// User\n\tconst userreg = /\\/user\\/(?!.*videos)/g;\n\n\tif (userreg.test(string_)) {\n\t\tconst elements = string_.split('/');\n\t\treturn stripParameters(elements.pop());\n\t}\n\n\t// Attribution_link\n\tconst attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n\tif (attrreg.test(string_)) {\n\t\treturn stripParameters(string_.match(attrreg)[1]);\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the vimeo id.\n *\n * @param {String} vimeoString the url from which you want to extract the id\n * @returns {String|undefined}\n */\nexport default function vimeo(vimeoString) {\n\tlet string_ = vimeoString;\n\n\tif (string_.includes('#')) {\n\t\t[string_] = string_.split('#');\n\t}\n\n\tif (string_.includes('?') && !string_.includes('clip_id=')) {\n\t\t[string_] = string_.split('?');\n\t}\n\n\tlet id;\n\tlet array;\n\n\tconst event = /https?:\\/\\/vimeo\\.com\\/event\\/(\\d+)$/;\n\n\tconst eventMatches = event.exec(string_);\n\n\tif (eventMatches && eventMatches[1]) {\n\t\treturn eventMatches[1];\n\t}\n\n\tconst primary = /https?:\\/\\/vimeo\\.com\\/(\\d+)/;\n\n\tconst matches = primary.exec(string_);\n\tif (matches && matches[1]) {\n\t\treturn matches[1];\n\t}\n\n\tconst vimeoPipe = [\n\t\t'https?://player.vimeo.com/video/[0-9]+$',\n\t\t'https?://vimeo.com/channels',\n\t\t'groups',\n\t\t'album',\n\t].join('|');\n\n\tconst vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n\tif (vimeoRegex.test(string_)) {\n\t\tarray = string_.split('/');\n\t\tif (array && array.length > 0) {\n\t\t\tid = array.pop();\n\t\t}\n\t} else if (/clip_id=/gim.test(string_)) {\n\t\tarray = string_.split('clip_id=');\n\t\tif (array && array.length > 0) {\n\t\t\t[id] = array[1].split('&');\n\t\t}\n\t}\n\n\treturn id;\n}\n","/**\n * Get the vine id.\n * @param {string} string_ - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function vine(string_) {\n\tconst regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z\\d]*)\\/?/;\n\tconst matches = regex.exec(string_);\n\n\tif (matches && matches.length > 1) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the VideoPress id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function videopress(urlString) {\n\tlet idRegex;\n\n\tif (urlString.includes('embed')) {\n\t\tidRegex = /embed\\/(\\w{8})/;\n\t\treturn urlString.match(idRegex)[1];\n\t}\n\n\tidRegex = /\\/v\\/(\\w{8})/;\n\n\tconst matches = urlString.match(idRegex);\n\n\tif (matches && matches.length > 0) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the Microsoft Stream id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function microsoftStream(urlString) {\n\tconst regex = (urlString.includes('embed'))\n\t\t? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z\\d-]*)\\/?/\n\t\t: /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z\\d-]*)\\/?/;\n\tconst matches = regex.exec(urlString);\n\n\tif (matches && matches.length > 1) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the tiktok id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function tiktok(urlString) {\n\t// Parse basic url and embeds\n\tconst basicReg = /tiktok\\.com(.*)\\/video\\/(\\d+)/gm;\n\tconst basicParsed = basicReg.exec(urlString);\n\tif (basicParsed && basicParsed.length > 2) {\n\t\treturn basicParsed[2];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the dailymotion id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function dailymotion(urlString) {\n\t// Parse basic url and embeds\n\tconst basicReg = /dailymotion\\.com(.*)(video)\\/([a-zA-Z\\d]+)/gm;\n\tconst basicParsed = basicReg.exec(urlString);\n\tif (basicParsed) {\n\t\treturn basicParsed[3];\n\t}\n\n\t// Parse shortlink\n\tconst shortRegex = /dai\\.ly\\/([a-zA-Z\\d]+)/gm;\n\tconst shortParsed = shortRegex.exec(urlString);\n\tif (shortParsed && shortParsed.length > 1) {\n\t\treturn shortParsed[1];\n\t}\n\n\t// Dynamic link\n\tconst dynamicRegex = /dailymotion\\.com(.*)video=([a-zA-Z\\d]+)/gm;\n\tconst dynamicParsed = dynamicRegex.exec(urlString);\n\tif (dynamicParsed && dynamicParsed.length > 2) {\n\t\treturn dynamicParsed[2];\n\t}\n\n\treturn undefined;\n}\n","import youtube from './youtube.js';\nimport vimeo from './vimeo.js';\nimport vine from './vine.js';\nimport videopress from './videopress.js';\nimport microsoftStream from './microsoftstream.js';\nimport tiktok from './tiktok.js';\nimport dailymotion from './dailymotion.js';\nimport getSrc from './utils/get-src.js';\n\n/**\n * Get the id and service from a video url.\n * @param {String} urlString - the url from which you want to extract the id\n * @returns {Object}\n */\nfunction getVideoId(urlString) {\n\tif (typeof urlString !== 'string') {\n\t\tthrow new TypeError('get-video-id expects a string');\n\t}\n\n\tlet string_ = urlString;\n\n\tif (/<iframe/gi.test(string_)) {\n\t\tstring_ = getSrc(string_);\n\t}\n\n\t// Remove surrounding whitespaces or linefeeds\n\tstring_ = string_.trim();\n\n\t// Remove the '-nocookie' flag from youtube urls\n\tstring_ = string_.replace('-nocookie', '');\n\n\t// Remove any leading `www.`\n\tstring_ = string_.replace('/www.', '/');\n\n\tlet metadata = {\n\t\tid: null,\n\t\tservice: null,\n\t};\n\n\t// Try to handle google redirection uri\n\tif (/\\/\\/google/.test(string_)) {\n\t\t// Find the redirection uri\n\t\tconst matches = string_.match(/url=([^&]+)&/);\n\n\t\t// Decode the found uri and replace current url string - continue with final link\n\t\tif (matches) {\n\t\t\t// JavaScript can get encoded URI\n\t\t\tstring_ = decodeURIComponent(matches[1]);\n\t\t}\n\t}\n\n\tif (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: youtube(string_),\n\t\t\tservice: 'youtube',\n\t\t};\n\t} else if (/vimeo/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: vimeo(string_),\n\t\t\tservice: 'vimeo',\n\t\t};\n\t} else if (/vine/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: vine(string_),\n\t\t\tservice: 'vine',\n\t\t};\n\t} else if (/videopress/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: videopress(string_),\n\t\t\tservice: 'videopress',\n\t\t};\n\t} else if (/microsoftstream/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: microsoftStream(string_),\n\t\t\tservice: 'microsoftstream',\n\t\t};\n\t} else if (/tiktok\\.com/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: tiktok(string_),\n\t\t\tservice: 'tiktok',\n\t\t};\n\t} else if (/(dailymotion\\.com|dai\\.ly)/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: dailymotion(string_),\n\t\t\tservice: 'dailymotion',\n\t\t};\n\t}\n\n\treturn metadata;\n}\n\nexport default getVideoId;\n","\n/**\n * Get the value assigned to a \"src\" attribute in a string, or undefined.\n * @param {String} input\n * @returns {String|undefined}\n */\nexport default function getSrc(input) {\n\tif (typeof input !== 'string') {\n\t\tthrow new TypeError('getSrc expected a string');\n\t}\n\n\tconst srcRegEx = /src=\"(.*?)\"/gm;\n\tconst matches = srcRegEx.exec(input);\n\n\tif (matches && matches.length >= 2) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n"],"names":["stripParameters","shortcodeString","includes","split","youtube","youtubeString","string_","replace","shortcode","test","inlinev","parameterv","parameterwebp","embedreg","pop","attrreg","match","vimeo","vimeoString","id","array","eventMatches","exec","matches","vimeoPipe","join","RegExp","length","vine","videopress","urlString","idRegex","microsoftStream","tiktok","basicParsed","dailymotion","shortParsed","dynamicParsed","TypeError","input","getSrc","trim","metadata","service","decodeURIComponent"],"mappings":"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"}